USER-SUPPLIED VALUES:
aws:
  licenseConfigSecretName: ""
controller:
  PodDisruptionBudget:
    enable: false
  affinity: {}
  allowPrivilegeEscalation: false
  autoscaling:
    annotations: {}
    enabled: false
    maxReplicas: 20
    minReplicas: 2
    targetCPUUtilizationPercentage: 80
  config: {}
  configAnnotations: {}
  containerPort:
    http: 8080
    https: 8443
    stat: 1024
  daemonset:
    hostPorts:
      http: 80
      https: 443
      stat: 1024
    useHostNetwork: false
    useHostPort: false
  defaultTLSSecret:
    enabled: true
    secret: null
    secretNamespace: '{{ include "kubernetes-ingress.namespace" . }}'
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enableRuntimeDefaultSeccompProfile: true
  enableServiceLinks: true
  existingImagePullSecret: null
  extraArgs: []
  extraContainers: []
  extraEnvs: []
  extraLabels: {}
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullPolicy: IfNotPresent
    repository: haproxytech/kubernetes-ingress
    tag: '{{ .Chart.AppVersion }}'
  imageCredentials:
    password: null
    registry: null
    username: null
  ingressClass: haproxy
  ingressClassResource:
    default: false
    name: haproxy
    parameters: {}
  initContainers: []
  keda:
    behavior: {}
    cooldownPeriod: 300
    enabled: false
    maxReplicas: 20
    minReplicas: 2
    pollingInterval: 30
    restoreToOriginalReplicaCount: false
    scaledObject:
      annotations: {}
    triggers: []
  kind: Deployment
  kubernetesGateway:
    enabled: true
    gatewayControllerName: haproxy.org/gateway-controller
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 1042
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  logging:
    level: info
    traffic: {}
  minReadySeconds: 0
  name: controller
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  publishService:
    enabled: true
    pathOverride: ""
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 1042
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 2
  resources:
    requests:
      cpu: 250m
      memory: 400Mi
  runtimeClassName: ""
  service:
    annotations: {}
    configMapTCPServices: tcp-services
    enablePorts:
      http: true
      https: true
      prometheus: true
      stat: true
    enabled: true
    externalIPs: []
    healthCheckNodePort: 0
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts: {}
    ports:
      http: 80
      https: 443
      prometheus: 6060
      stat: 1024
    targetPorts:
      http: http
      https: https
      prometheus: prometheus
      stat: stat
    tcp: true
    tcpPorts:
    - name: listen-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: nifi
      port: 8443
      protocol: TCP
      targetPort: 8443
    type: LoadBalancer
  serviceMonitor:
    enabled: false
    endpoints:
    - interval: 30s
      path: /metrics
      port: stat
      scheme: http
    extraLabels: {}
  startupProbe:
    failureThreshold: 20
    httpGet:
      path: /healthz
      port: 1042
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 1
    successThreshold: 1
    timeoutSeconds: 1
  strategy:
    type: RollingUpdate
  techdump:
    enabled: false
  terminationGracePeriodSeconds: 60
  tolerations: []
  topologySpreadConstraints: []
  unprivileged: true
namespace:
  create: false
podSecurityPolicy:
  annotations: {}
  enabled: false
rbac:
  create: true
serviceAccount:
  create: true
  name: null
